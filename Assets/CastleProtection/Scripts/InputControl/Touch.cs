//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/CastleProtection/Scripts/InputControl/Touch.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Touch : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Touch()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Touch"",
    ""maps"": [
        {
            ""name"": ""FireControll"",
            ""id"": ""00169aa5-5f59-42ec-b4f8-534efa4fa6bf"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f0800e5f-2bcf-41cd-b1d5-190929462934"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9e466764-5e62-4ae0-991b-9fd45a3f51bc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4b11df4-f260-4bd4-8a1d-90896bd4fb42"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileTouch"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66f2b6d6-2953-4ad4-8f58-06c0660b4374"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7874fdf-7225-48fc-99e6-91a3a7ee8ca2"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileTouch"",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""807759d4-ddb6-42a1-a787-7c27bf01f72a"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MobileTouch"",
            ""bindingGroup"": ""MobileTouch"",
            ""devices"": []
        },
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // FireControll
        m_FireControll = asset.FindActionMap("FireControll", throwIfNotFound: true);
        m_FireControll_TouchPosition = m_FireControll.FindAction("TouchPosition", throwIfNotFound: true);
        m_FireControll_TouchInput = m_FireControll.FindAction("TouchInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FireControll
    private readonly InputActionMap m_FireControll;
    private IFireControllActions m_FireControllActionsCallbackInterface;
    private readonly InputAction m_FireControll_TouchPosition;
    private readonly InputAction m_FireControll_TouchInput;
    public struct FireControllActions
    {
        private @Touch m_Wrapper;
        public FireControllActions(@Touch wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_FireControll_TouchPosition;
        public InputAction @TouchInput => m_Wrapper.m_FireControll_TouchInput;
        public InputActionMap Get() { return m_Wrapper.m_FireControll; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FireControllActions set) { return set.Get(); }
        public void SetCallbacks(IFireControllActions instance)
        {
            if (m_Wrapper.m_FireControllActionsCallbackInterface != null)
            {
                @TouchPosition.started -= m_Wrapper.m_FireControllActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_FireControllActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_FireControllActionsCallbackInterface.OnTouchPosition;
                @TouchInput.started -= m_Wrapper.m_FireControllActionsCallbackInterface.OnTouchInput;
                @TouchInput.performed -= m_Wrapper.m_FireControllActionsCallbackInterface.OnTouchInput;
                @TouchInput.canceled -= m_Wrapper.m_FireControllActionsCallbackInterface.OnTouchInput;
            }
            m_Wrapper.m_FireControllActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @TouchInput.started += instance.OnTouchInput;
                @TouchInput.performed += instance.OnTouchInput;
                @TouchInput.canceled += instance.OnTouchInput;
            }
        }
    }
    public FireControllActions @FireControll => new FireControllActions(this);
    private int m_MobileTouchSchemeIndex = -1;
    public InputControlScheme MobileTouchScheme
    {
        get
        {
            if (m_MobileTouchSchemeIndex == -1) m_MobileTouchSchemeIndex = asset.FindControlSchemeIndex("MobileTouch");
            return asset.controlSchemes[m_MobileTouchSchemeIndex];
        }
    }
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IFireControllActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchInput(InputAction.CallbackContext context);
    }
}
