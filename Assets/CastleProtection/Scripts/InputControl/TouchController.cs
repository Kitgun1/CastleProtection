//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/CastleProtection/Scripts/InputControl/TouchController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchController"",
    ""maps"": [
        {
            ""name"": ""GameTouch"",
            ""id"": ""e4fd502d-1ca1-4f26-814a-debf6de58251"",
            ""actions"": [
                {
                    ""name"": ""InputAction"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ec820377-5499-4af2-ae59-3320244d2e8e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e6559581-d1c3-4b64-989c-e2bbb7676ccc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71637a04-617c-41db-9720-1f8bf453870f"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""InputAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b04c634f-f24b-4f08-bf95-322fb661e203"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileTouchScreen"",
                    ""action"": ""InputAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20cb42ad-4a57-4bf5-a98e-124d407b15ea"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseAndKeyboard"",
                    ""action"": ""InputPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fbde754-1186-40de-97d1-5c1decd4661e"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileTouchScreen"",
                    ""action"": ""InputPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseAndKeyboard"",
            ""bindingGroup"": ""MouseAndKeyboard"",
            ""devices"": []
        },
        {
            ""name"": ""MobileTouchScreen"",
            ""bindingGroup"": ""MobileTouchScreen"",
            ""devices"": []
        }
    ]
}");
        // GameTouch
        m_GameTouch = asset.FindActionMap("GameTouch", throwIfNotFound: true);
        m_GameTouch_InputAction = m_GameTouch.FindAction("InputAction", throwIfNotFound: true);
        m_GameTouch_InputPosition = m_GameTouch.FindAction("InputPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameTouch
    private readonly InputActionMap m_GameTouch;
    private IGameTouchActions m_GameTouchActionsCallbackInterface;
    private readonly InputAction m_GameTouch_InputAction;
    private readonly InputAction m_GameTouch_InputPosition;
    public struct GameTouchActions
    {
        private @TouchController m_Wrapper;
        public GameTouchActions(@TouchController wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputAction => m_Wrapper.m_GameTouch_InputAction;
        public InputAction @InputPosition => m_Wrapper.m_GameTouch_InputPosition;
        public InputActionMap Get() { return m_Wrapper.m_GameTouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameTouchActions set) { return set.Get(); }
        public void SetCallbacks(IGameTouchActions instance)
        {
            if (m_Wrapper.m_GameTouchActionsCallbackInterface != null)
            {
                @InputAction.started -= m_Wrapper.m_GameTouchActionsCallbackInterface.OnInputAction;
                @InputAction.performed -= m_Wrapper.m_GameTouchActionsCallbackInterface.OnInputAction;
                @InputAction.canceled -= m_Wrapper.m_GameTouchActionsCallbackInterface.OnInputAction;
                @InputPosition.started -= m_Wrapper.m_GameTouchActionsCallbackInterface.OnInputPosition;
                @InputPosition.performed -= m_Wrapper.m_GameTouchActionsCallbackInterface.OnInputPosition;
                @InputPosition.canceled -= m_Wrapper.m_GameTouchActionsCallbackInterface.OnInputPosition;
            }
            m_Wrapper.m_GameTouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @InputAction.started += instance.OnInputAction;
                @InputAction.performed += instance.OnInputAction;
                @InputAction.canceled += instance.OnInputAction;
                @InputPosition.started += instance.OnInputPosition;
                @InputPosition.performed += instance.OnInputPosition;
                @InputPosition.canceled += instance.OnInputPosition;
            }
        }
    }
    public GameTouchActions @GameTouch => new GameTouchActions(this);
    private int m_MouseAndKeyboardSchemeIndex = -1;
    public InputControlScheme MouseAndKeyboardScheme
    {
        get
        {
            if (m_MouseAndKeyboardSchemeIndex == -1) m_MouseAndKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseAndKeyboard");
            return asset.controlSchemes[m_MouseAndKeyboardSchemeIndex];
        }
    }
    private int m_MobileTouchScreenSchemeIndex = -1;
    public InputControlScheme MobileTouchScreenScheme
    {
        get
        {
            if (m_MobileTouchScreenSchemeIndex == -1) m_MobileTouchScreenSchemeIndex = asset.FindControlSchemeIndex("MobileTouchScreen");
            return asset.controlSchemes[m_MobileTouchScreenSchemeIndex];
        }
    }
    public interface IGameTouchActions
    {
        void OnInputAction(InputAction.CallbackContext context);
        void OnInputPosition(InputAction.CallbackContext context);
    }
}
